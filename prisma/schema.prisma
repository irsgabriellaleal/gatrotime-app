generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  role          Role          @default(CUSTOMER)
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  firstname     String
  lastname      String
  reservations  Reservation[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id           String            @id @default(uuid())
  userId       String
  restaurantId String
  tableId      String
  date         DateTime
  status       ReservationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  restaurant   Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table        Table             @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id           String        @id @default(uuid())
  name         String
  location     String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  tables       Table[]
}

model Table {
  id           String        @id @default(uuid())
  restaurantId String
  number       Int
  capacity     Int
  status       TableStatus   @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}
