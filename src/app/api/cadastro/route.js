import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

export async function POST(req) {
  console.log("‚úÖ Iniciando a API de Cadastro...");

  try {
    console.log("üì• Tentando receber JSON da requisi√ß√£o...");
    let body;
    try {
      body = await req.json();
      console.log("‚úÖ JSON recebido:", body);
    } catch (jsonError) {
      console.error("‚ùå Erro ao processar JSON:", jsonError);
      return new Response(JSON.stringify({ error: "Erro ao processar JSON" }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    // üõë Parar aqui se os dados estiverem indefinidos
    if (
      !body ||
      !body.firstname || // ‚ùå O JSON recebido tem firstName, mas aqui est√° firstname (min√∫sculo)
      !body.lastname ||
      !body.email ||
      !body.password
    ) {
      console.error("‚ö†Ô∏è Campos obrigat√≥rios ausentes:", body);
      return new Response(
        JSON.stringify({ error: "Todos os campos s√£o obrigat√≥rios" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log("üîç Verificando se o e-mail j√° existe...");
    const existingUser = await prisma.user.findUnique({
      where: { email: body.email },
    });

    if (existingUser) {
      console.log("‚ö†Ô∏è E-mail j√° cadastrado:", existingUser);
      return new Response(
        JSON.stringify({ error: "Este e-mail j√° est√° cadastrado" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    console.log("üîê Criptografando senha...");
    const hashedPassword = await bcrypt.hash(body.password, 10);

    console.log("üõ† Criando usu√°rio no banco de dados...");
    const user = await prisma.user.create({
      data: {
        firstname: body.firstname,
        lastname: body.lastname,
        email: body.email,
        password: hashedPassword,
      },
    });

    console.log("‚úÖ Usu√°rio cadastrado com sucesso:", user);

    return new Response(
      JSON.stringify({ message: "Usu√°rio cadastrado com sucesso", user }),
      { status: 201, headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("‚ùå Erro no bloco `catch`:", error);

    return new Response(
      JSON.stringify({
        error: "Erro ao criar usu√°rio",
        details: error.message || "Erro desconhecido",
      }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
